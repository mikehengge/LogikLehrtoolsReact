package lehrtools.viewmodel.information;

import java.util.ArrayList;
import java.util.LinkedList;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import lehrtools.model.state.S_Calculation;
import lehrtools.model.state.S_Res_Calculation;
import lehrtools.model.state.S_Sub_Calculation;
import lehrtools.model.state.Step_Subsumption;
/**
 *  Class that is used to  pass information in between the
 *  View and the ViewModel. This Class generated by Line_Factory class and
 *  it takes its values Step_Resolution and Step_Subsumption instances. This Line Subclass
 *  is the only one used in the Back Dual Resolution algorithm and for the resolution and subsumption steps
 *  in the Resolution algorithm.
 */
public class Line_Double extends Line {
	/**
	 * The name of the formula, usually Res(F)_i or R_i, since contains
	 * information for a Resolution or a Subsumption step.
	 */
	public final String formula_name;
	/**
	 * Contains a String representation of each clause from a formula.
	 */
	public ArrayList<String> clauses;
	/**
	 * List signals the view if a clause is to be displayed as selected or not.
	 */
	public ArrayList<BooleanProperty> selected;
	/**
	 * The List of calculations corresponding to that Step.
	 */
	public ArrayList<ArrayList<String>> calculations;
	/**
	 * This field is used only for the Backward Dual Resolution and its
	 * used to differentiate the clauses that were absorbed from the ones that
	 * were not.
	 */
	public ArrayList<BooleanProperty> active;

	/**
	 * Caontructor
	 * @param label String representation of the type from the Step subclass instance it was created.
	 * @param step_description Description of the Step subclass instance it was created.
	 * @param formula_name The name of the formula, usually Res(F)_i or R_i.
	 * @param clauses String representation of each clause from a formula.
	 * @param steps  The List of calculations corresponding to that Step.
	 */
	public Line_Double(String label ,
					   String step_description,
					   String formula_name,
					   ArrayList<String> clauses,
					   LinkedList<S_Calculation> steps)
	{
		super(label, step_description);
		this.formula_name = formula_name;
		this.clauses = clauses;
		this.selected = new ArrayList<>();
		this.active = new ArrayList<>();
		for(int i =0; i < clauses.size();i++)
		{
			selected.add(new SimpleBooleanProperty(false));
			active.add(new SimpleBooleanProperty(true));
		}
		calculations = new ArrayList<>();
		for(S_Calculation step : steps)
		{
			if(step instanceof  S_Res_Calculation)
				calculations.add(step.toStringList());
			else if( step instanceof S_Sub_Calculation)
				calculations.add(step.toStringList());
		}
	}

}
